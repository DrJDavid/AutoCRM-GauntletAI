import { z } from 'zod';
import type { TicketStatus, TicketPriority, TicketCategory } from '@/types/database';

const ticketStatusEnum: TicketStatus[] = ['open', 'in_progress', 'resolved', 'closed'];
const ticketPriorityEnum: TicketPriority[] = ['low', 'medium', 'high', 'urgent'];
const ticketCategoryEnum: TicketCategory[] = ['technical', 'billing', 'account', 'feature', 'other'];

/**
 * Schema for validating ticket creation/update forms
 * This ensures that the data matches our types at runtime
 */
export const ticketSchema = z.object({
  id: z.string().uuid().optional(),
  title: z
    .string()
    .min(1, 'Title is required'),
  description: z
    .string()
    .nullable(),
  customer_id: z.string().uuid(),
  organization_id: z.string().uuid(),
  status: z.enum(ticketStatusEnum).default('open'),
  priority: z.enum(ticketPriorityEnum).default('medium'),
  category: z.enum(ticketCategoryEnum).default('other'),
  assigned_agent_id: z.string().uuid().nullable(),
  created_at: z.string().datetime().optional(),
  updated_at: z.string().datetime().optional(),
  tags: z.array(z.string()).nullable(),
  metadata: z.record(z.unknown()).nullable(),
});

/**
 * Schema for creating a new ticket
 * Omits fields that are generated by the database
 */
export const createTicketSchema = ticketSchema.omit({
  id: true,
  created_at: true,
  updated_at: true,
});

/**
 * Schema for updating an existing ticket
 * Makes all fields optional
 */
export const updateTicketSchema = createTicketSchema.partial();

/**
 * Type inference from schemas
 * These will match our database types
 */
export type Ticket = z.infer<typeof ticketSchema>;
export type CreateTicketInput = z.infer<typeof createTicketSchema>;
export type UpdateTicketInput = z.infer<typeof updateTicketSchema>;
